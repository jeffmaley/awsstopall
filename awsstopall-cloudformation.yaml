AWSTemplateFormatVersion: "2010-09-09"

Description:
  This CloudFormation template will create a budget threshold and a Lambda function to halt services once the threshold is reached.

Parameters:
  UserEmail:
    Description: Your email address for the budget alerts.
    Type: String
    Default: you@email.domain
  BudgetAmount:
    Description: Value for the budget alert
    Type: Number
    Default: 100
  BudgetThreshold:
    Description: Percentage of BudgetAmount that should trigger the Lambda
    Type: Number
    Default: 100
  BudgetUnit:
    Description: Currency unit for BudgetAmount (USD, GB, etc...)
    Type: String
    Default: USD
  S3Bucket:
    Description: S3 bucket for storing the Lambda zip
    Type: String
    Default: bucketname
  ZipFileName:
    Description: Name of the zip file containing the Lambda function
    Type: String
    Default: awsstopall-lambda.zip
  DisableIamUsers:
    Description: Disable IAM users on budget threshold breach (yes/no)
    Type: String
    AllowedValues: [true, false]
    Default: false
  StopEc2Instances:
    Description: Stop running EC2 instances on budget threshold breach (yes/no)
    Type: String
    AllowedValues: [true, false]
    Default: true
  BlockS3:
    Description: Block public access to S3 on budget threshold breach (yes/no)
    Type: String
    AllowedValues: [true, false]
    Default: true
  DeleteAutoScalingGroups:
    Description: Delete AutoScaling Groups on budget threshold breach (yes/no)
    Type: String
    AllowedValues: [true, false]
    Default: true

Resources:
  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'      
      Description: Role for Lambda execution
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - PolicyName: RequiredAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeRegions'
                  - 'ec2:StopInstances'
                  - 'autoscaling:DescribeAutoScalingGroups'  
                  - 'autoscaling:DeleteAutoScalingGroup' 
                  - 's3:ListAllMyBuckets'
                  - 's3:PutBucketPublicAccessBlock'     
                  - 'iam:ListUsers'
                  - 'iam:DeleteLoginProfile'
                  - 'iam:ListAccessKeys'
                  - 'iam:UpdateAccessKey'
                Resource: '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref ZipFileName
      Description: Lambda function for disabling IAM Users, blocking S3, and stopping instances
      Environment: 
        Variables:
          DISABLE_IAM_USERS: !Ref DisableIamUsers
          STOP_EC2_INSTANCES: !Ref StopEc2Instances
          BLOCK_S3: !Ref BlockS3
          DELETE_AUTOSCALING_GROUPS: !Ref DeleteAutoScalingGroups
      Handler: main.main
      PackageType: Zip
      Role: !GetAtt LambdaExecRole.Arn
      Runtime: python3.9
      Timeout: 90
  CloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref LambdaFunction]]
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: BudgetAlert
      Subscription:
          - Endpoint: !GetAtt LambdaFunction.Arn
            Protocol: lambda
          - Endpoint: !Ref UserEmail
            Protocol: email
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - budgets.amazonaws.com
                Action:
                  - 'sns:Publish'
                Resource: !Ref SNSTopic
      Topics: 
        - !Ref SNSTopic
  Budget:
    Type: AWS::Budgets::Budget
    Properties: 
      Budget: 
        BudgetLimit: 
          Amount: !Ref BudgetAmount
          Unit: !Ref BudgetUnit
        BudgetType: COST
        TimeUnit: MONTHLY
      NotificationsWithSubscribers: 
          - Notification:
              ComparisonOperator: GREATER_THAN
              NotificationType: ACTUAL
              Threshold: !Ref BudgetThreshold
              ThresholdType: PERCENTAGE
            Subscribers:
              - Address: !Ref SNSTopic
                SubscriptionType: SNS 

Outputs:
  LambdaExecRoleName:
    Description: Name of the Lambda execution role
    Value: !GetAtt LambdaExecRole.RoleId
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction
  SNSTopicName:
    Description: Name of the SNS topic
    Value: !GetAtt SNSTopic.TopicName